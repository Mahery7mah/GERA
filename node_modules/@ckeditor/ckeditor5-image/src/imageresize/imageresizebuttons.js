import { Plugin, icons } from 'ckeditor5/src/core.js';
import { ButtonView, DropdownButtonView, ViewModel, createDropdown, addListToDropdown } from 'ckeditor5/src/ui.js';
import { CKEditorError, Collection } from 'ckeditor5/src/utils.js';
import ImageResizeEditing from './imageresizeediting.js';

export default class ImageResizeButtons extends Plugin {
    static get requires() {
        return [ImageResizeEditing];
    }

    static get pluginName() {
        return 'ImageResizeButtons';
    }

    constructor(editor) {
        super(editor);
        this._resizeUnit = editor.config.get('image.resizeUnit');
    }

    init() {
        const editor = this.editor;
        const options = editor.config.get('image.resizeOptions');
        const command = editor.commands.get('resizeImage');
        this.bind('isEnabled').to(command);
        for (const option of options) {
            this._registerImageResizeButton(option);
        }
        this._registerImageResizeDropdown(options);
    }

    _registerImageResizeButton(option) {
        const editor = this.editor;
        const { name, value, icon } = option;
        const optionValueWithUnit = value ? value + this._resizeUnit : null;
        editor.ui.componentFactory.add(name, locale => {
            const button = new ButtonView(locale);
            const command = editor.commands.get('resizeImage');
            const labelText = this._getOptionLabelValue(option, true);
            if (!RESIZE_ICONS[icon]) {
                throw new CKEditorError('imageresizebuttons-missing-icon', editor, option);
            }
            button.set({
                label: labelText,
                icon: RESIZE_ICONS[icon],
                tooltip: labelText,
                isToggleable: true
            });
            button.bind('isEnabled').to(this);
            button.bind('isOn').to(command, 'value', this._getIsOnButtonCallback(optionValueWithUnit));
            this.listenTo(button, 'execute', () => {
                editor.execute('resizeImage', { width: optionValueWithUnit });
            });
            return button;
        });
    }

    _registerImageResizeDropdown(options) {
        const editor = this.editor;
        const t = editor.t;
        const originalSizeOption = options.find(option => !option.value);
        const componentCreator = (locale) => {
            const command = editor.commands.get('resizeImage');
            const dropdownView = createDropdown(locale, DropdownButtonView);
            const dropdownButton = dropdownView.buttonView;
            const accessibleLabel = t('Resize image');
            dropdownButton.set({
                tooltip: accessibleLabel,
                commandValue: originalSizeOption ? originalSizeOption.value : null,
                icon: RESIZE_ICONS.medium,
                isToggleable: true,
                label: this._getOptionLabelValue(originalSizeOption),
                withText: true,
                class: 'ck-resize-image-button',
                ariaLabel: accessibleLabel,
                ariaLabelledBy: undefined
            });
            dropdownButton.bind('label').to(command, 'value', commandValue => {
                if (commandValue && commandValue.width) {
                    return commandValue.width;
                }
                else {
                    return this._getOptionLabelValue(originalSizeOption);
                }
            });
            dropdownView.bind('isEnabled').to(this);
            addListToDropdown(dropdownView, () => this._getResizeDropdownListItemDefinitions(options, command), {
                ariaLabel: t('Image resize list'),
                role: 'menu'
            });
            this.listenTo(dropdownView, 'execute', evt => {
                editor.execute(evt.source.commandName, { width: evt.source.commandValue });
                editor.editing.view.focus();
            });
            return dropdownView;
        };
        editor.ui.componentFactory.add('resizeImage', componentCreator);
        editor.ui.componentFactory.add('imageResize', componentCreator);
    }

    _getOptionLabelValue(option, forTooltip = false) {
        const t = this.editor.t;
        if (option.label) {
            return option.label;
        }
        else if (forTooltip) {
            if (option.value) {
                return t('Resize image to %0', option.value + this._resizeUnit);
            }
            else {
                return t('Resize image to the original size');
            }
        }
        else {
            if (option.value) {
                return option.value + this._resizeUnit;
            }
            else {
                return t('Original');
            }
        }
    }

    _getResizeDropdownListItemDefinitions(options, command) {
        const itemDefinitions = new Collection();
        options.map(option => {
            const optionValueWithUnit = option.value ? option.value + this._resizeUnit : null;
            const definition = {
                type: 'button',
                model: new ViewModel({
                    commandName: 'resizeImage',
                    commandValue: optionValueWithUnit,
                    label: this._getOptionLabelValue(option),
                    role: 'menuitemradio',
                    withText: true,
                    icon: null
                })
            };
            definition.model.bind('isOn').to(command, 'value', this._getIsOnButtonCallback(optionValueWithUnit));
            itemDefinitions.add(definition);
        });
        return itemDefinitions;
    }

    _getIsOnButtonCallback(value) {
        return (commandValue) => {
            const objectCommandValue = commandValue;
            if (value === null && objectCommandValue === value) {
                return true;
            }
            return objectCommandValue !== null && objectCommandValue.width === value;
        };
    }
}