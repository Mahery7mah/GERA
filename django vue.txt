Alors pour une application de gestion des événements avec redaction des articles avec backend et frontend django, j'ai utilisé l'application classique de django pour le backend(coté admin pour la gestion) et je vais utiliser l'application vue.js pour le frontend(coté client comme un site)
GERA/
├── app_SGCL/                       # Dossier de l'application Django
│   ├── migrations/                 # Dossier des migrations Django
│   ├── __init__.py
│   ├── admin.py                    # Configuration de l'interface d'administration Django
│   ├── apps.py                     # Configuration de l'application Django
│   ├── models.py                   # Définition des modèles Django
│   ├── tests.py                    # Tests unitaires Django
│   ├── views.py                    # Définition des vues Django
│   ├── utils.py                    # Cryptographies
│   ├── templates/                  # Dossier des templates Django
│   │   └── _base.html       
│   │   └── login.html     
│   │   └── ville/
│   │   │   └── ville_detail.html  
│   │   │   └── ville_form.html   
│   │   │   └── ville_list.html 
│   ├── templatetags/
│   │   └── custom_filters.py    
│   └── static/                     # Dossier des fichiers statiques Django
├── gera_front/                       # Dossier Vue.js
│   ├── node_modules/               # Modules Node.js
│   ├── public/                     # Fichiers publics (index.html, favicon, etc.)
│   │   ├── index.html
│   ├── src/                        # Dossier source Vue.js
│   │   ├── assets/                 # Assets statiques (images, CSS, etc.)
│   │   ├── assets/                 # Assets statiques (images, CSS, etc.)
│   │   ├── components/             # Composants Vue.js réutilisables
│   │   ├── views/                  # Vues Vue.js
│   │   ├── App.vue                 # Composant racine de l'application Vue.js
│   │   ├── main.js                 # Point d'entrée de l'application Vue.js
│   │   └── router.                 # Configuration du router Vue.js           
│   ├── .gitignore                  # Fichier d'ignorance Git
│   ├── babel.config.js             # Configuration Babel
│   ├── package.json                # Fichier de configuration des dépendances Node.js
│   ├── package-lock.json           # Verrouillage des dépendances Node.js
│   ├── README.md                   # Fichier README
│   ├── vue.config.js
│   └── static/
│   │   └── dist                      
└── projet_sgcl/                   # Dossier de configuration du projet Django
    ├── __init__.py
    ├── settings.py                 # Fichier de configuration des paramètres Django
    ├── urls.py                     # Fichier de routage principal Django
    └── wsgi.py                     # Fichier de configuration WSGI pour le déploiement

mon settings.py : 
"""
Django settings for projet_SGCL project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from app_SGCL.utils import generate_key
from django.urls import reverse_lazy
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
STATIC_DIR=os.path.join(BASE_DIR,'static')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6kn(c#ym+89^)vemi85+qtil20w19$a2w3l3t+xr-)+o-2zg=z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'app_SGCL',    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'projet_SGCL.urls'

CORS_ALLOW_ALL_ORIGINS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'projet_SGCL.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECRET_KEY = generate_key()

LOGIN_URL = 'adminlogin'
LOGOUT_REDIRECT_URL = 'adminlogin'
LOGIN_REDIRECT_URL = reverse_lazy('ville_list')

MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

urls.py :
"""
URL configuration for projet_SGCL project.

the `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from app_SGCL import views
from app_SGCL import utils
from app_SGCL.views import CustomLoginView, CustomLogoutView


urlpatterns = [
    #Accueuil
    # path('home', views.home, name='home'),

    path('admin/', admin.site.urls),
    path('',  CustomLoginView.as_view(), name='adminlogin'),

    #dashboard
    # path('dashboard/', views.dashboard, name='dashboard'),
    
        
    # path('',  HomeView.as_view(), name='homepage'),
    # path('appmahery',  AppMahery.as_view(), name='appmahery'),
    # path('appfront',  AppFront.as_view(), name='appfront'),
    
    # villes
    path('ville_list', views.ville_list, name='ville_list'),
    path('<str:encrypted_id>/ville_detail', views.ville_detail, name='ville_detail'),
    path('create_ville', views.ville_create, name='ville_create'),
    path('<str:encrypted_id>/update_ville/', views.ville_update, name='ville_update'),
    path('<str:encrypted_id>/delete_region/', views.ville_delete, name='ville_delete'),

    #connexion et déconnexion
    path('adminlogin', CustomLoginView.as_view(), name='adminlogin'),
    path('adminlogout', CustomLogoutView.as_view(), name='logout'),

]

views.py :
# views.py

from django.urls import reverse
from django.shortcuts import render, get_object_or_404, redirect
from django.conf import settings
from .models import Ville, Quartier, Adresse
from .forms import VilleForm, QuartierForm
from django.core.paginator import Paginator
from .utils import encrypt_id, decrypt_id
from django.db.models import Q
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.views import LoginView, LogoutView
from django.urls import reverse_lazy
from .forms import CustomAuthenticationForm
from django.db.models import F
from django.views.decorators.csrf import csrf_exempt
from django.db.models import Sum, Count
from django.db import connection
from django.http import JsonResponse
from django.core.serializers.json import DjangoJSONEncoder
import json
from django.db.models import Count
from django.db import connection
from django.db.models.functions import ExtractMonth

from django.views.generic import TemplateView




SECRET_KEY = settings.SECRET_KEY

# ville :
@login_required
def ville_list(request):
    search_query = request.GET.get('q')
    sort_by = request.GET.get('sort_by', 'Nom')
    direction = request.GET.get('direction', 'asc')

    valid_sort_fields = ['Nom']  
    default_sort_field = 'Nom'

    if sort_by not in valid_sort_fields:
        sort_by = default_sort_field

    if direction not in ['asc', 'desc']:
        direction = 'asc'

    order_by_field = f'{sort_by}' if direction == 'asc' else f'-{sort_by}'

    if search_query:
        ville_list = Ville.objects.filter(Q(Nom__icontains=search_query)).order_by(order_by_field)
    else:
        ville_list = Ville.objects.all().order_by(order_by_field)

    paginator = Paginator(ville_list, 10)
    page = request.GET.get('page')
    ville = paginator.get_page(page)

    subtitle = 'liste des Villes'

    return render(request, 'ville/ville_list.html', {'ville': ville, 'SECRET_KEY': settings.SECRET_KEY, 'search_query': search_query, 'sort_by': sort_by, 'direction': direction, 'subtitle': subtitle})

@login_required
def ville_detail(request, encrypted_id):
    ville_id = decrypt_id(encrypted_id, SECRET_KEY)

    if ville_id is not None:
        ville = get_object_or_404(Ville, pk=ville_id)
        subtitle = 'Détail du ville'
        return render(request, 'ville/ville_detail.html', {'ville': ville, 'subtitle': subtitle})
    else:
        return render(request, 'erreur/404.html')

@login_required
def ville_create(request):
    if request.method == 'POST':
        form = VilleForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Ville ajouté avec succès.')
            return redirect('ville_list')
    else:
        form = VilleForm()
    subtitle = 'Ajouter des ville'
    return render(request, 'ville/ville_form.html', {'form': form, 'subtitle': subtitle})

# ville_update method in views.py
@login_required
def ville_update(request, encrypted_id):
    try:
        ville_id = decrypt_id(encrypted_id, SECRET_KEY)
        ville = get_object_or_404(Ville, pk=ville_id)

        if request.method == 'POST':
            form = VilleForm(request.POST, instance=ville)
            if form.is_valid():
                form.save()
                messages.success(request, 'Ville modifié avec succès.')
                return redirect('ville_list')
        else:
            form = VilleForm(instance=ville)
        subtitle = 'Modifier des ville'
        return render(request, 'ville/ville_form.html', {'form': form,'subtitle': subtitle})
    except Exception as e:
        print(f"Error in ville_update: {e}")
        messages.error(request, 'Une erreur s\'est produite lors de la modification du ville.')
        return render(request, 'erreur/404.html')

# ville_delete method in views.py
@login_required
def ville_delete(request, encrypted_id):
    ville_id = decrypt_id(encrypted_id, SECRET_KEY)

    if ville_id is not None:
        ville = get_object_or_404(Ville, pk=ville_id)
        ville.delete()
        messages.success(request, 'Ville supprimée avec succès.')
        return redirect('ville_list')
    else:
        messages.error(request, 'Une erreur s\'est produite lors de la suppression du ville.')
        return render(request, 'erreur/404.html')

models.py :
from django.db import models

from django.contrib.auth.models import User


class Ville(models.Model):
    VilleID = models.AutoField(primary_key=True)
    Nom = models.CharField(max_length=50)
    def __str__(self):
        return self.Nom

class Quartier(models.Model):
    QuartierID = models.AutoField(primary_key=True)
    Nom = models.CharField(max_length=255)
    CodePostal = models.CharField(max_length=20)
    Ville = models.ForeignKey('Ville', on_delete=models.PROTECT)
    def __str__(self):
        return self.Nom
        
class Adresse(models.Model):
    AdresseID = models.AutoField(primary_key=True)
    Rue = models.CharField(max_length=255)
    Quartier = models.ForeignKey('Quartier', on_delete=models.PROTECT)

gera_front/public/index.html :
{% extends "_base.html" %}
<!DOCTYPE html>
{% block html %}       
<html lang="en">
  <head>
    {% block head %}{{ block.super }}    

    {% endblock %}       
  </head>
  <body>
    {% block body %} 
      {{ block.super }}
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
    {% endblock body %} 
  </body>
</html>
{% endblock html %} 

gera_front/src/App.vue :
<template>
  <router-view/>
</template>

gera_front/src/main.js :
import { createApp } from 'vue';
// import App from './App.vue'
import router from './router';
import App from './App';

const app = createApp (App);

app.use(router);

app.mount("#app");
// createApp(App).mount('#app')

gera_front/src/router.js (je ne sais pas encore comment faire)

gera_front/vue.config.js :
// const { defineConfig } = require('@vue/cli-service')
// module.exports = defineConfig({
//   transpileDependencies: true
// })

module.exports = {
  publicPath: ' http://localhost:8080',
  outputDir : '../static/dist/',
  indexPath : '../../templates/_base_vue.html',

  configureWebpack : {
    devServer : {
      devMiddleware : {
        writeToDisk : true
      }
    }
  }
};






